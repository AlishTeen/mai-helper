import re

from pyisemail import is_email
from geocoder import geonames

from bot_app import bot, db, markups, temp_user_data, emojis, handlers, utils
from bot_app.models import User


def register(call, query='register'):
    if call.from_user.id not in temp_user_data:
        if db.user_exists(call.from_user.id) and query == 'register':
            bot.answer_callback_query(call.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.')
        else:
            temp_user_data[call.from_user.id] = User(user_id=call.from_user.id,
                                                     username=call.from_user.username,
                                                     first_name=call.from_user.first_name)
            bot.delete_message(call.message.chat.id, call.message.id)
            msg = bot.send_message(call.message.chat.id,
                                   '–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –í—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ '
                                   '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.')
            bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
                             reply_markup=markups.back_markup(text=f'{emojis.DENY1_EMOJI} –û—Ç–º–µ–Ω–∞'))
            bot.register_next_step_handler(msg, register_name, msg_id=msg.id)


def register_name(message, msg_id):
    cyrillic = re.compile('^[–ê-–Ø–∞-—è]+$')
    name = message.text
    if cyrillic.match(name):
        temp_user_data[message.from_user.id].real_name = name.capitalize()
        msg = bot.send_message(message.chat.id, '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                               reply_markup=markups.number_markup())
        bot.register_next_step_handler(msg, register_number, msg_id=msg_id)
    else:
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π:')
        bot.register_next_step_handler(msg, register_name, msg_id=msg_id)


def register_number(message, msg_id):
    if message.content_type == 'contact':
        temp_user_data[message.from_user.id].phone_number = message.contact.phone_number
        msg = bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail –∞–¥—Ä–µ—Å:', reply_markup=markups.no_markup())
        bot.register_next_step_handler(msg, register_email, msg_id=msg_id)
    else:
        msg = bot.send_message(message.chat.id, '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(msg, register_number, msg_id=msg_id)


def register_email(message, msg_id):
    email = message.text
    if is_email(email):
        temp_user_data[message.from_user.id].email_address = email
        msg = bot.send_message(message.chat.id, '–í–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:', reply_markup=markups.nation_markup())
        bot.register_next_step_handler(msg, register_nation, msg_id=msg_id)
    else:
        msg = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π e-mail –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler(msg, register_email, msg_id=msg_id)


def register_nation(message, msg_id):
    nation = message.text
    if nation in ['üá∑üá∫ –†–§', 'üá∞üáø –†–ö']:
        temp_user_data[message.from_user.id].nation = nation
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:',
                               reply_markup=markups.no_markup())
        bot.register_next_step_handler(msg, register_geo, msg_id=msg_id)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:',
                               reply_markup=markups.nation_markup())
        bot.register_next_step_handler(msg, register_nation, msg_id=msg_id)


def register_geo(message, msg_id):
    geo = geonames(message.text, fuzzy=0.8, key='cobalt')
    if geo.address:
        temp_user_data[message.from_user.id].geo = geo.address
        temp_user_data[message.from_user.id].avatar_b64 = utils.thumbnail_from_id(message.from_user.id)
        complete_register(message, msg_id)
    else:
        msg = bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
        bot.register_next_step_handler(msg, register_geo, msg_id=msg_id)


def complete_register(message, msg_id):
    if not db.user_exists(message.from_user.id):
        if db.add_user(temp_user_data[message.from_user.id]):
            bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.')
        else:
            bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.')
    else:
        if db.edit_user(user_id=message.from_user.id, user_obj=temp_user_data[message.from_user.id]):
            bot.send_message(message.chat.id, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        else:
            bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.')
    for i in range(int(msg_id), int(message.id + 1)):
        bot.delete_message(message.from_user.id, i)
    temp_user_data.pop(message.chat.id)
    handlers.send_welcome(message)
